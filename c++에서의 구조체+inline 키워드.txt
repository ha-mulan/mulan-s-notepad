구조체의 이점 ->연관되어 있는 데이터를 하나로 묶기때문에 구현 관리가 용이하다.

c++에서의 구조체 
1.struct Car{//   }; 를 지원하고 선언시 Car a이렇게 선언가능하므로 
typedef 키워드를 사용 하지 않아도 된다.

2.구조체 안에서 함수 선언+정의가 가능! 
	1.선언+정의 둘다 할경우 carSpeed가 inline처리 된다.
	struct Car{
		int speed;
		void carSpeed(){
			speed++;
			}
		}
	2.선언만 구조체 안에서 할경우 정의는 구조체 밖에서 하기 떄문에 inline 처리가 되지 않는다. 따라서 인라인 키워드를 붙여준다
	struct Car{
		void carSpeed()
		};
	inline void Car::carSpeed(){
	}
inline 키워드
	c언어에서는 매크로 함수를 사용하였다
 
	매크로 함수 사용시 함수호출로 인한 시간을 줄일수 있지만 
	단점은 길이가 어느정도 길어지면 매크로 함수를 정의하기가 힘들었다

따라서 c++에서는 inline 함수를 이용한다.

template <typename T>
inline T sqrt(T x){
	return x*x;
}

하지만 inline 함수 안에 루프가있거나 함수가 좀 길어지면 메인함수 코드가 부플어 질수 있으므로 길이가 짧은 함수에 사용하자

또 최근 컴파일러는 inline 키워드를 사용하여도 적합하지 않으면 처리하지않고 키워드를 사용하지 않아도 자동으로 처리한다고도 한다.





